
const SEED = 0
const COUNT = 1

def show_calculations(seed: Int) {
    
    var result = ((seed >> 7) ^ seed) & 0xffff
    result = ((result << 9) ^ result) & 0xffff
    result = ((result >> 8) ^ result) & 0xffff

}

def on_reset($scratch_space: [Int], test: Int) {

    let seed = 1 + random(0xfffe)
    scratch_space[SEED] = seed
    show_calculations(seed)

}

def arch_get_input($scratch_space: [Int], test: Int) Int {

    return scratch_space[SEED]

}

def arch_check_output($scratch_space: [Int], test: Int, input: Int, output: Int) TestResult {

    let seed = scratch_space[SEED]

    var result = ((seed >> 7) ^ seed) & 0xffff
    result = ((result << 9) ^ result) & 0xffff
    result = ((result >> 8) ^ result) & 0xffff

    if output != result {
    
        set_error(`The next seed should be {result}, not {output}`)
        return fail
    
    }

    if scratch_space[COUNT] == 64 {
        
        return win

    }
    scratch_space[COUNT] += 1

    scratch_space[SEED] = result
    show_calculations(result)

}
