kind = sequential
title = "RAM"
size = [-256, -256, 255, 255]
immutable_program = true
immutable_spec = true
no_score = true
copy_solution_to_level = ["symphony_7_io_devices"]
dialogue = [
    (info, `First place a RAM component and set it's width to 16 bit and its size to 65536.`)
    (info, `Once again, these are the [color=#ff9800]Modes[/color] of [color=#e49f44]Symphony[/color]:

[code]0 IO
1 ALU
2 JUMP
3 RAM[/code]

And the encoding looks like this:
[code][color=#ff9800]M[/color] = Mode
[color=#ff6680]O[/color] = Opcode
[color=#9966ff]I[/color] = Immediate bit
[color=#ffe666]D[/color] = Destination register
[color=#66ff99]A[/color] = Argument A
[color=#66ccff]B[/color] = Argument B
[color=#bbbbbb]0[/color] = Unused / zero[/code]

[code][color=#ff9800]MM[/color][color=#bbbbbb]O[/color][color=#9966ff]I[/color][color=#ff6680]OOOO[/color] [color=#ffe666]DDDD[/color][color=#66ff99]AAAA[/color] [color=#bbbbbb]0000[/color][color=#66ccff]BBBB[/color] [color=#bbbbbb]00000000[/color][/code]

In this level we implement the RAM mode. There are two opcodes in this mode:
[code]0 load
1 store[/code]

The 'load' instruction should load the value at address [color=#66ccff]argument B[/color] and store the result in [color=#ffe666]destination[/color].

The 'store' instruction should store [color=#66ccff]argument A[/color] at address [color=#66ccff]argument B[/color].
`),
]
default_isa_spec = `

[settings]
name = "Symphony"

[fields]

register
zr 0000
r1 0001
r2 0010
r3 0011
r4 0100
r5 0101
r6 0110
r7 0111
r8 1000
r9 1001
r10 1010
r11 1011
r12 1100
r13 1101
sp 1110
flags 1111

[instructions]

or %a(register), %b(register), %c(register)
01000001 aaaabbbb 0000cccc 00000000
OR %b and %c and store the result in %a.

nand %a(register), %b(register), %c(register)
01000000 aaaabbbb 0000cccc 00000000
NAND %b and %c and store the result in %a.

nor %a(register), %b(register), %c(register)
01000011 aaaabbbb 0000cccc 00000000
NOR %b and %c and store the result in %a.

and %a(register), %b(register), %c(register)
01000010 aaaabbbb 0000cccc 00000000
AND %b and %c and store the result in %a.

add %a(register), %b(register), %c(register)
01000100 aaaabbbb 0000cccc 00000000
ADD %b and %c and store the result in %a.

sub %a(register), %b(register), %c(register)
01000101 aaaabbbb 0000cccc 00000000
SUB %b and %c and store the result in %a.

xor %a(register), %b(register), %c(register)
01000110 aaaabbbb 0000cccc 00000000
XOR %b and %c and store the result in %a.

lsl %a(register), %b(register), %c(register)
01000111 aaaabbbb 0000cccc 00000000
LSL %b and %c and store the result in %a.

lsr %a(register), %b(register), %c(register)
01001000 aaaabbbb 0000cccc 00000000
LSR %b and %c and store the result in %a.

cmp %a(register), %b(register)
01001001 0111aaaa 0000bbbb 00000000
Compares %a and %b and store the resulting flags in r6.


or %a(register), %b(register), %c(immediate)
01010001 aaaabbbb cccccccc cccccccc
OR %b and %c and store the result in %a.

nand %a(register), %b(register), %c(immediate)
01010000 aaaabbbb cccccccc cccccccc
NAND %b and %c and store the result in %a.

nor %a(register), %b(register), %c(immediate)
01010011 aaaabbbb cccccccc cccccccc
NOR %b and %c and store the result in %a.

and %a(register), %b(register), %c(immediate)
01010010 aaaabbbb cccccccc cccccccc
AND %b and %c and store the result in %a.

add %a(register), %b(register), %c(immediate)
01010100 aaaabbbb cccccccc cccccccc
ADD %b and %c and store the result in %a.

sub %a(register), %b(register), %c(immediate)
01010101 aaaabbbb cccccccc cccccccc
SUB %b and %c and store the result in %a.

xor %a(register), %b(register), %c(immediate)
01010110 aaaabbbb cccccccc cccccccc
XOR %b and %c and store the result in %a.

lsl %a(register), %b(register), %c(immediate)
01010111 aaaabbbb cccccccc cccccccc
LSL %b and %c and store the result in %a.

lsr %a(register), %b(register), %c(immediate)
01011000 aaaabbbb cccccccc cccccccc
LSR %b and %c and store the result in %a.

cmp %a(register), %b(immediate)
01011001 0111aaaa bbbbbbbb bbbbbbbb
Compares %a and %b and store the resulting flags in r6.


jmp %a(register)
10001000 00001111 0000aaaa 00000000
Jump to %a


jmp %a(immediate | label)
10011000 11111111 aaaaaaaa aaaaaaaa
Jump to %a

je %a(immediate | label)
10010001 11111111 aaaaaaaa aaaaaaaa
Jump to %a if the values were equal (reading results from 'flags').

jne %a(immediate | label)
10011001 11111111 aaaaaaaa aaaaaaaa
Jump to %a if the values were not equal (reading results from 'flags').


jb %a(immediate | label)
10010010 11111111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was below (unsigned) the second (reading results from 'flags').

jae %a(immediate | label)
10011010 11111111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was above (unsigned) or euqal to the second (reading results from 'flags').

jbe %a(immediate | label)
10010011 11111111 aaaaaaaa aaaaaaaa
Jump to %a if the First value was below (unsigned) or equal to the second (reading results from 'flags').

ja %a(immediate | label)
10011011 11111111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was above (unsigned) the second (reading results from 'flags').


jl %a(immediate | label)
10010100 11111111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was less (signed) than the second (reading results from 'flags').

jge %a(immediate | label)
10011100 11111111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was greater (signed) or equal to the second (reading results from 'flags').

jle %a(immediate | label)
10010101 11111111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was less (signed) or equal to the second (reading results from 'flags').

jg %a(immediate | label)
10011101 11111111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was greater (signed) than the second (reading results from 'flags').

in %a(register)
00000001 aaaa0000 00000000 00000000
Loads an input and stores it in %a

out %a(register)
00000010 00000000 0000aaaa 00000000
Sends %a to output

load %dest(register), [%address(register)]
11000000 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store [%address(register)], %value(register)
11000001 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load %dest(register), [%address(immediate)]
11010000 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store [%address(immediate)], %value(register)
11010001 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM

nop
00000000 00000000 00000000 00000000
Does nothing

`
default_assembly = `cmp r8, r5
store [6], r4
load r10, [6]
add sp, sp, 45544
load r13, [1883]
jmp label_6
jmp label_7
jle label_8
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_9:
cmp r7, r13
jmp label_9
label_8:
label_7:
label_6:
jmp label_15
load r10, [6]
label_15:
store [6], r3
load zr, [6]
store [1883], zr
store [1883], r4
store [6], sp
lsr r8, r5, 31927
load r9, [6]
load sp, [6]
xor r4, r9, 60002
load zr, [6]
store [1883], zr
cmp r7, r5
load r3, [6]
load r13, [1883]
load zr, [6]
store [1883], sp
store [6], r8
jmp label_35
store [1883], r3
label_35:
cmp sp, r9
store [6], r11
xor r12, r13, 55450
store [1883], sp
load r3, [6]
store [6], r12
load r3, [6]
store [1883], r12
store [1883], r5
store [6], r9
load flags, [6]
load r11, [1883]
store [1883], r5
load r13, [6]
lsl r2, r1, flags
store [6], r8
lsl r13, flags, 43634
store [1883], r4
store [1883], r7
cmp r8, r12
store [6], r3
store [6], r7
store [1883], r7
store [6], r1
store [1883], zr
load r6, [6]
store [6], r7
cmp r9, r5
store [1883], flags
load sp, [1883]
load r8, [1883]
jmp label_69
nor r2, flags, r2
label_69:
jge label_72
store [1883], r5
label_72:
store [6], r10
jmp label_76
jmp label_77
store [1883], r7
label_77:
label_76:
store [6], flags
load r13, [1883]
store [1883], r2
store [1883], zr
cmp r13, r4
jmp label_86
load r3, [6]
label_86:
load flags, [1883]
store [6], r5
lsr r11, r3, sp
store [1883], r1
store [1883], r13
jmp label_94
store [1883], r11
label_94:
store [6], r12
store [6], r13
jmp label_99
store [6], r1
label_99:
store [6], flags
store [6], r8
load sp, [6]
store [6], r13
jmp label_106
nor r11, r8, r5
label_106:
store [1883], flags
load r12, [1883]
store [1883], zr
jmp label_112
store [1883], zr
label_112:
cmp r1, r2
store [1883], r13
load r13, [1883]
store [1883], r12
load r4, [1883]
load flags, [1883]
lsl r4, r12, r4
store [6], r11
cmp r6, r10
store [1883], r3
store [1883], r11
load sp, [6]
load r9, [6]
load flags, [6]
store [6], r4
store [1883], r1
je label_131
store [6], r9
label_131:
cmp zr, r9
or zr, r12, r12
je label_136
store [6], r2
label_136:
store [1883], r13
store [1883], r4
cmp r10, r13
jmp label_142
jmp label_143
store [1883], r7
label_143:
label_142:
store [1883], r9
jmp label_148
store [6], r13
label_148:
store [6], r6
store [1883], sp
store [6], r4
lsl r3, flags, r10
store [1883], r1
cmp r8, flags
or r10, r3, r2
store [1883], sp
je label_159
store [6], r3
label_159:
cmp sp, r6
jle label_163
load r2, [1883]
label_163:
store [6], r5
jmp label_167
store [6], r13
label_167:
load r2, [6]
store [1883], r13
load r1, [1883]
cmp r6, r11
jmp label_174
store [1883], r5
label_174:
cmp r1, r1
load r1, [6]
store [1883], r13
store [1883], sp
store [1883], r6
store [1883], r7
jmp label_183
load sp, [6]
label_183:
load r9, [1883]
and r1, r2, r4
load r6, [1883]
load zr, [6]
load r13, [1883]
store [1883], flags
store [6], r12
store [6], r4
jmp label_194
load r2, [6]
label_194:
jmp label_197
store [1883], r8
label_197:
store [6], r2
store [1883], r8
store [6], r5
jmp label_203
nor r3, r5, 55574
label_203:
store [1883], r9
store [1883], r8
sub r1, r2, 58304
store [6], flags
load r4, [1883]
jae label_211
store [1883], r6
label_211:
store [6], r13
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_215:
store [6], r4
jle label_215
store [1883], r12
store [1883], r9
load r2, [1883]
load r2, [1883]
store [6], r2
store [6], r10
store [6], r8
lsr r9, r4, r5
cmp r1, r11
cmp r4, r2
lsr r12, flags, 52402
store [6], r8
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_230:
load r10, [1883]
jmp label_230
lsl r2, r1, r2
store [6], r9
xor r13, r7, 64158
store [1883], r12
jne label_237
and flags, r3, r7
label_237:
store [1883], r1
store [1883], r11
store [6], r12
xor zr, r10, 57974
store [6], r9
load r3, [6]
store [6], r12
load r4, [6]
store [1883], r2
jbe label_249
store [6], r9
label_249:
load r5, [1883]
store [6], r12
load r11, [1883]
load r7, [6]
store [1883], zr
or r10, r13, 7150
load r10, [6]
store [6], sp
store [6], r3
cmp zr, r1
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_262:
load r2, [1883]
jne label_262
store [6], r5
store [1883], r9
jmp label_267
jmp label_268
load r9, [6]
label_268:
label_267:
jle label_272
load flags, [6]
label_272:
load r4, [6]
store [1883], flags
nand r9, r1, r3
store [1883], r11
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_279:
store [6], r8
jb label_279
store [6], r3
jmp label_283
store [6], flags
label_283:
load r9, [1883]
load r12, [1883]
store [1883], flags
store [1883], r5
store [6], r10
load sp, [1883]
cmp r10, r6
store [1883], flags
load r9, [1883]
store [1883], r9
load r13, [6]
store [1883], flags
store [1883], r2
store [6], r6
xor r4, r10, 47984
nand r5, r12, 31572
store [1883], r9
load r4, [6]
store [6], r3
or flags, r1, zr
store [6], r12
store [6], r5
store [6], r10
store [6], r6
store [1883], r9
load r2, [6]
store [6], r9
store [1883], r13
store [6], r13
store [6], sp
store [1883], flags
cmp r13, r6
store [1883], r5
store [6], r5
store [1883], r11
store [6], flags
store [1883], sp
store [1883], r13
nor r12, r6, flags
load zr, [1883]
store [1883], r11
load sp, [6]
load flags, [1883]
store [1883], sp
store [6], zr
store [1883], r13
store [6], r8
store [6], r13
store [6], r7
nand r3, sp, r11
store [1883], r13
store [6], r11
store [6], r8
store [6], sp
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_340:
store [1883], r9
jmp label_340
jmp label_343
jmp label_344
store [1883], r9
label_344:
label_343:
store [6], r12
jbe label_349
nand r4, r12, 28625
label_349:
jle label_352
load r11, [1883]
label_352:
store [1883], r4
store [1883], r6
load r13, [1883]
load r7, [6]
store [1883], zr
cmp r4, zr
store [1883], r2
store [1883], r6
jmp label_363
load r12, [1883]
label_363:
load r5, [6]
load zr, [1883]
cmp r4, r12
store [6], r6
store [1883], sp
jmp label_371
load r1, [1883]
label_371:
store [1883], r11
store [6], flags
load r12, [6]
store [6], zr
load r6, [1883]
store [1883], r8
load r7, [6]
jmp label_381
jmp label_382
store [1883], r6
label_382:
label_381:
store [1883], r11
store [1883], r6
store [1883], r8
load r11, [1883]
lsr r9, r1, r12
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_391:
load r8, [1883]
jmp label_391
load sp, [1883]
store [6], r9
jmp label_396
store [1883], r4
label_396:
load r12, [1883]
store [6], r10
and r5, r3, 21799
load r6, [6]
store [6], zr
store [1883], r8
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_405:
load r10, [6]
jle label_405
store [1883], r13
store [1883], r2
lsr r10, r10, r9
add sp, r2, 53595
cmp sp, zr
store [6], r4
load r6, [6]
add r1, r13, 43490
load r4, [6]
store [6], r9
store [6], r10
store [1883], r2
load r11, [1883]
load r2, [6]
jmp label_422
load r2, [6]
label_422:
store [6], r11
sub r5, r10, r12
jmp label_427
load r10, [6]
label_427:
store [1883], r13
store [1883], r1
store [1883], r4
store [1883], r4
store [6], r4
store [1883], sp
store [1883], zr
store [6], r4
jmp label_438
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_439:
store [1883], zr
jg label_439
label_438:
jmp label_443
store [1883], flags
label_443:
load zr, [6]
jmp label_447
load r3, [6]
label_447:
load r3, [1883]
jmp label_451
store [6], r13
label_451:
store [1883], r11
store [1883], r12
cmp r7, r6
store [6], r5
store [6], sp
ja label_459
jmp label_460
jbe label_461
store [1883], r7
label_461:
label_460:
label_459:
store [1883], sp
load r2, [1883]
store [1883], r13
store [1883], r5
store [6], r2
load r2, [1883]
store [1883], r1
load r8, [1883]
load r4, [1883]
jmp label_475
store [1883], r10
label_475:
store [6], r13
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_479:
load r1, [6]
jae label_479
store [6], sp
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_483:
load r9, [1883]
jl label_483
store [6], r5
store [1883], r1
load r5, [6]
store [1883], r4
load r12, [1883]
load r8, [1883]
load sp, [1883]
store [1883], r4
jmp label_494
store [6], r7
label_494:
store [1883], r8
load zr, [6]
store [6], r13
load r13, [6]
load r11, [6]
store [6], flags
store [6], zr
cmp flags, zr
store [1883], r10
cmp r7, r4
load sp, [1883]
load r13, [1883]
jmp label_509
jae label_510
store [1883], r7
label_510:
label_509:
nand r9, r1, r10
load r2, [1883]
jge label_516
lsr r9, r10, r4
label_516:
store [6], sp
load flags, [6]
store [6], flags
jmp label_522
store [1883], zr
label_522:
load r1, [6]
store [6], r9
store [1883], r2
lsl r8, r9, r11
store [6], r10
store [6], r13
store [1883], r7
store [1883], r8
store [1883], r13
cmp r11, r7
store [6], r12
store [6], r13
store [1883], r11
store [1883], r1
nor r7, r8, r11
cmp r13, r6
load r12, [6]
cmp flags, r5
store [1883], r13
store [6], r2
load r4, [6]
and r4, r7, 1979
jmp label_547
jmp label_548
add r10, r11, r12
label_548:
label_547:
store [6], r2
store [1883], r10
load r2, [6]
cmp r12, r4
store [6], r2
store [1883], r12
store [1883], flags
store [1883], r6
store [1883], r9
cmp r12, r9
load r10, [1883]
cmp sp, r3
store [6], sp
jb label_565
load flags, [1883]
label_565:
cmp r10, r11
store [6], r1
store [1883], r9
store [6], r8
load r8, [1883]
load r5, [1883]
ja label_574
store [1883], r4
label_574:
store [6], sp
load r13, [1883]
store [6], r12
store [6], r13
store [6], r8
cmp r7, r4
store [6], r12
jmp label_584
load r6, [6]
label_584:
cmp r13, r12
store [6], r11
store [1883], zr
store [1883], r12
load r3, [1883]
jae label_592
jge label_593
store [6], r11
label_593:
label_592:
store [6], r5
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_598:
store [1883], r13
ja label_598
jmp label_601
load zr, [1883]
label_601:
store [6], r2
load r1, [1883]
store [6], r7
store [1883], r12
store [1883], r7
load r2, [6]
load zr, [1883]
load r4, [6]
load r5, [6]
store [6], r1
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_614:
store [6], r7
jmp label_614
load r13, [1883]
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_618:
load r2, [6]
jle label_618
jmp label_621
cmp r12, r1
label_621:
xor zr, r4, 51006
load r9, [1883]
store [6], r13
jmp label_627
nand r13, r12, r10
label_627:
load r6, [6]
store [6], r6
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_632:
nand r6, r3, 40029
jl label_632
je label_635
store [1883], r5
label_635:
store [6], zr
cmp zr, r11
cmp sp, r5
store [1883], sp
and r11, r1, 17251
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_643:
store [1883], r11
je label_643
store [1883], r4
jmp label_647
jmp label_648
load r5, [6]
label_648:
label_647:
store [6], r1
store [6], r9
load r4, [6]
store [6], r12
store [6], sp
load r6, [6]
load r13, [1883]
jmp label_659
load r10, [1883]
label_659:
load r4, [6]
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_663:
store [1883], r3
jl label_663
store [1883], r2
store [6], r4
store [1883], zr
store [1883], r9
load r9, [6]
jmp label_671
store [1883], r8
label_671:
store [1883], r9
load r6, [6]
store [1883], r10
store [1883], r9
sub sp, r10, r9
load sp, [6]
nor flags, flags, r5
cmp sp, r5
jl label_682
jmp label_683
store [1883], sp
label_683:
label_682:
store [6], r10
jmp label_688
store [6], r5
label_688:
cmp zr, flags
load flags, [6]
jmp label_693
load zr, [6]
label_693:
cmp r1, r6
jmp label_697
load r2, [1883]
label_697:
lsr r6, r10, 50284
load r12, [1883]
store [1883], r7
store [1883], r8
jmp label_704
store [1883], sp
label_704:
store [6], r10
store [6], zr
load r13, [1883]
store [1883], sp
load r1, [6]
store [6], r11
store [1883], flags
store [1883], r2
store [1883], r4
cmp flags, r2
load r2, [1883]
store [1883], r6
store [1883], r12
load r8, [6]
jmp label_721
load r10, [6]
label_721:
store [6], r5
load r8, [6]
store [6], r3
and r5, r13, 8749
store [6], r11
store [6], r6
load r3, [1883]
cmp r3, r13
store [1883], r3
store [6], r13
load r9, [6]
cmp r9, r8
load r2, [6]
load r1, [6]
jmp label_738
load sp, [6]
label_738:
load r7, [6]
store [6], r12
cmp r3, r7
load sp, [6]
store [1883], r3
load r8, [1883]
sub r10, r10, r12
store [6], r5
store [6], r4
load r2, [6]
je label_751
lsl r13, r4, r9
label_751:
store [6], r4
store [6], zr
load sp, [1883]
store [1883], r8
jmp label_758
jl label_759
store [6], r7
label_759:
label_758:
load r11, [6]
store [6], r1
store [6], r2
load r1, [1883]
store [1883], r7
load zr, [1883]
cmp r6, flags
jmp label_770
jl label_771
store [6], r11
label_771:
label_770:
load r7, [1883]
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_776:
store [1883], r1
je label_776
load r11, [1883]
store [1883], r6
store [6], r4
store [1883], r10
store [1883], r13
ja label_784
store [6], r9
label_784:
cmp r11, r12
store [6], r3
jmp label_789
load r12, [6]
label_789:
jmp label_792
load r11, [1883]
label_792:
load r5, [6]
store [6], r11
cmp r13, r10
jle label_798
store [6], r12
label_798:
lsl r12, r13, 33891
load r9, [1883]
store [6], r10
load r1, [6]
load r9, [6]
load r10, [6]
store [6], r11
store [1883], zr
cmp r7, r5
load sp, [6]
store [6], sp
store [1883], r9
load r12, [1883]
store [6], r8
store [1883], r12
store [1883], zr
load r8, [1883]
store [6], r1
jmp label_819
cmp r8, r3
label_819:
load r4, [6]
store [1883], zr
load r5, [1883]
store [1883], r12
jmp label_826
store [6], r9
label_826:
jl label_829
store [1883], r11
label_829:
jmp label_832
store [1883], r7
label_832:
jmp label_835
store [6], r7
label_835:
load r12, [6]
store [1883], r5
store [6], r11
and r7, r2, r10
store [1883], r13
load flags, [1883]
store [6], r4
store [1883], r1
load r3, [6]
jmp label_847
store [1883], r10
label_847:
nand r9, r9, r7
store [1883], r11
jmp label_852
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_853:
load r11, [6]
je label_853
label_852:
store [1883], r9
load r7, [6]
lsr flags, r5, 31924
load r6, [1883]
jb label_861
cmp r2, r8
label_861:
load r5, [6]
store [1883], r4
jmp label_866
store [1883], r11
label_866:
jne label_869
sub r5, r12, 21909
label_869:
store [6], flags
load r3, [6]
load r3, [6]
store [1883], r7
ja label_876
cmp r3, r3
label_876:
nand r2, r2, 65300
xor r1, r1, 27053
cmp sp, r7
cmp r2, r7
store [6], r13
load sp, [6]
add r8, r12, r1
store [6], r2
store [6], r3
load zr, [6]
load r10, [6]
lsr r8, r4, r10
store [6], r7
cmp r2, r3
load sp, [6]
store [1883], r6
store [1883], zr
store [6], r2
store [1883], r3
load r9, [6]
store [1883], r8
load r11, [1883]
load r7, [1883]
load r5, [1883]
jmp label_903
ja label_904
store [6], r3
label_904:
label_903:
load r6, [1883]
load r1, [1883]
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_910:
store [6], r5
jl label_910
store [1883], r8
store [1883], r5
jmp label_915
store [6], flags
label_915:
ja label_918
store [1883], r5
label_918:
store [1883], r12
store [1883], flags
load r6, [1883]
ja label_924
load r9, [6]
label_924:
store [1883], r2
cmp r8, r3
store [1883], r2
store [6], r2
load r6, [6]
store [6], r5
store [6], r10
store [1883], r7
lsr r8, r13, 4937
load r6, [1883]
store [1883], r10
load r6, [6]
store [1883], r1
cmp r2, r2
store [1883], r13
store [6], r9
store [1883], zr
load r13, [1883]
load r3, [6]
store [6], r6
store [6], r11
jle label_948
store [6], r11
label_948:
jmp label_951
store [1883], r10
label_951:
jmp label_954
load r4, [1883]
label_954:
load r10, [6]
store [1883], r9
nand r12, r1, r13
store [6], r8
cmp r5, r1
jmp label_962
load zr, [1883]
label_962:
sub r12, r13, r13
lsl r1, r2, 12466
store [6], r7
load sp, [1883]
load r12, [1883]
load r10, [1883]
jb label_971
store [6], r7
label_971:
store [1883], r12
store [1883], r2
load r12, [6]
load sp, [1883]
cmp sp, r9
store [1883], r4
store [6], r9
cmp r10, r6
load r6, [1883]
store [1883], sp
load r2, [6]
store [1883], r5
load r12, [6]
store [6], r13
jbe label_988
store [1883], r4
label_988:
store [1883], r9
load r3, [1883]
ja label_993
store [1883], r3
label_993:
store [6], r12
load sp, [1883]
jmp label_998
store [6], r4
label_998:
`