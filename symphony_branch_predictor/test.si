
const WAS_PREDICTING_0  = 1
const WAS_PREDICTING_1  = 2
const PREDICTION_ADDR_0 = 3
const PREDICTION_ADDR_1 = 4
const PREDICTION_OUTPUT_CACHE_0 = 5
const PREDICTION_OUTPUT_CACHE_1 = 6
const PREDICTION_CACHE  = 7

def retire_instruction(instruction: Int, $scratch_space: [Int], input: Int) Int {
    
    let mode            = (instruction >> 30)
    let opcode          = (instruction >> 24) & 0b1111
    let dest            = (instruction >> 20) & 0b1111
    let a               = (instruction >> 16) & 0b1111
    let b               = (instruction >> 8) & 0b1111
    let immediate       = (instruction >> 28) & 1 != 0
    let immediate_value =  instruction & 0xffff

    scratch_space[REGS + 0] = 0

    let a_value = scratch_space[REGS + a]
    let b_value = immediate ? immediate_value : scratch_space[REGS + b]

    def flag_result(a: Int, b: Int) Int {

        let equal = <Int> (a == b)
        let uless = <Int> (<U16> a < <U16> b) & 1
        let sless = <Int> (<S16> a < <S16> b) & 1

        return (sless << 2) | (uless << 1) | equal

    }

    switch mode

        OP_IO {

            const NOP         = 0
            const IO_IN       = 1
            const IO_OUT      = 2
            const IO_KEYBOARD = 3
            const IO_TIME_0   = 4
            const IO_TIME_1   = 5
            const IO_TIME_2   = 6
            const IO_TIME_3   = 7
            const IO_COUNTER  = 8
            const IO_CONSOLE  = 9

            switch opcode
                IO_IN {

                    scratch_space[REGS + dest] = input

                }
                IO_OUT {

                    return b_value

                }
                IO_KEYBOARD {

                    scratch_space[REGS + dest] = scratch_space[KEYBOARD]

                }
                IO_TIME_0 {

                    scratch_space[REGS + dest] = get_last_time() & 0xffff

                }
                IO_TIME_1 {

                    scratch_space[REGS + dest] = (get_last_time() >> 16) & 0xffff

                }
                IO_TIME_2 {

                    scratch_space[REGS + dest] = (get_last_time() >> 32) & 0xffff

                }
                IO_TIME_3 {

                    scratch_space[REGS + dest] = (get_last_time() >> 48) & 0xffff

                }
                IO_CONSOLE {

                    scratch_space[CONSOLE] = b_value

                }
                IO_COUNTER {

                    scratch_space[REGS + dest] = scratch_space[COUNTER_0] - 4

                }

        }

        OP_ALU {

            var result = 0

            switch opcode
                0 {
                    result = ~(a_value & b_value)
                }
                1 {
                    result = a_value | b_value
                }
                2 { 
                    result = a_value & b_value
                }
                3 { 
                    result = ~(a_value | b_value)
                }
                4 { 
                    result = a_value + b_value
                }
                5 { 
                    result = a_value - b_value
                }
                6 { 
                    result = a_value ^ b_value
                }
                7 { 
                    result = a_value << b_value
                }
                8 { 
                    result = a_value >> b_value
                }
                9 { 
                    result = flag_result(a_value, b_value)
                }

            scratch_space[REGS + dest] = result & 0xffff

        }

        OP_JMP {

            let flags   = a_value & 0b111
            let matched = (opcode & flags) > 0
            let met     = matched != ((opcode & 0b1000) > 0)

            if met {

                scratch_space[COUNTER_0] = b_value
                scratch_space[FLUSH_0] = 1

            }

        }

        OP_RAM {

            const LOAD  = 0
            const STORE = 1

            switch opcode
                LOAD {

                    var value = scratch_space[RAM + b_value] << 8 + scratch_space[RAM + b_value + 1]

                    scratch_space[REGS + dest] = value

                }
                STORE {

                    scratch_space[RAM + b_value + 1] = a_value & 0xff
                    scratch_space[RAM + b_value + 0] = a_value >> 8

                }

        }


    scratch_space[REGS + 0] = 0

    return Z_STATE

}

const OP_IO  = 0
const OP_ALU = 1
const OP_JMP = 2
const OP_RAM = 3

def get_random_instruction() Int {

    var mode = OP_JMP

    if random(8) == 0 { // Bias towards ALU
        mode = random(4)
    }

    let d_vec = random(8) << 20
    let a_vec = random(8) << 16
    let b_vec = random(2) == 0 ? 1 << 28 | random(0xffff) : random(8) << 8

    switch mode

        OP_RAM {

            let opcode = random(3)

            switch opcode
                0 { return 0 }
                1 {

                    return OP_RAM << 30 | opcode << 24 | d_vec | b_vec

                }
                2 {

                    return OP_RAM << 30 | opcode << 24 | 1 << 24 | b_vec | a_vec

                }

        }

        OP_JMP {

            var opcode = random(14)
            while opcode != 0b0001 && opcode != 0b1001 && opcode != 0b0010 && opcode != 0b1010 && opcode != 0b0011 && opcode != 0b1011 && opcode != 0b0100 && opcode != 0b1100 && opcode != 0b0101 && opcode != 0b1101 {
                opcode = random(14)
            }

            return OP_JMP << 30 | opcode << 24 | 0b111 << 20 | ((b_vec >> 2) << 2) 

        }

        OP_IO {

            if random(2) == 0 {

                return OP_IO << 30 | d_vec

            } else {

                return OP_IO << 30 | 1 << 24 | a_vec

            }

        }

        OP_ALU {

            let opcode = random(10)

            if opcode == 9 {

                return OP_ALU << 30 | opcode << 24 | 6 << 20 | a_vec | b_vec

            }

            return OP_ALU << 30 | opcode << 24 | d_vec | a_vec | b_vec

        }

}

def instruction_to_str(instruction: Int) String {

    let mode            = (instruction >> 30)
    let opcode          = (instruction >> 24) & 0b1111
    let dest            = (instruction >> 20) & 0b1111
    let a               = (instruction >> 16) & 0b1111
    let b               = (instruction >> 8) & 0b1111
    let immediate       = (instruction >> 28) & 1 != 0
    let immediate_value =  instruction & 0xffff

    var dest_str = ""

    switch dest
        0 { dest_str = "zr" }
        14 { dest_str = "sp" }
        15 { dest_str = "flags" }
        default { dest_str = "r" + str(dest) }


    var a_str = ""

    switch a
        0 { a_str = "zr" }
        14 { a_str = "sp" }
        15 { a_str = "flags" }
        default { a_str = "r" + str(a) }

    var b_str = ""

    if immediate {

        b_str = str(immediate_value)

    } else {

        switch b
            0 { b_str = "zr" }
            14 { b_str = "sp" }
            15 { b_str = "flags" }
            default { b_str = "r" + str(b) }

    }

    switch mode

        OP_IO {

            const NOP      = 0
            const IN       = 1
            const OUT      = 2
            const CONSOLE  = 3
            const TIME_0   = 4
            const TIME_1   = 5
            const TIME_2   = 6
            const TIME_3   = 7
            const COUNTER  = 8
            const KEYBOARD = 9

            switch opcode
                NOP      { return `nop (does nothing)` }
                IN       { return `in {dest_str}` }
                OUT      { return `out {b_str}` }
                CONSOLE  { return `console {b_str}` }
                TIME_0   { return `time_0 {dest_str}` }
                TIME_1   { return `time_1 {dest_str}` }
                TIME_2   { return `time_2 {dest_str}` }
                TIME_3   { return `time_3 {dest_str}` }
                COUNTER  { return `counter {dest_str}` }
                KEYBOARD { return `keyboard {dest_str}` }

        }

        OP_ALU {

            var opcode_str = ""

            switch opcode
                0 { opcode_str = "nand" }
                1 { opcode_str = "or"  }
                2 { opcode_str = "and" }
                3 { opcode_str = "nor" }
                4 { opcode_str = "add" }
                5 { opcode_str = "sub" }
                6 { opcode_str = "xor" }
                7 { opcode_str = "lsl" }
                8 { opcode_str = "lsr" }
                9 { return `cmp {a_str}, {b_str}` }

            return `{opcode_str} {dest_str}, {a_str}, {b_str}`

        }

        OP_JMP {

            switch opcode
                0b1000  { return `jmp {b_str}` }
                0b0001  { return `je {b_str}` }
                0b1001  { return `jne {b_str}` }

                0b0010  { return `jb {b_str}` }
                0b1010  { return `jae {b_str}` }
                0b0011  { return `jbe {b_str}` }
                0b1011  { return `ja {b_str}` }

                0b0100  { return `jl {b_str}` }
                0b1100  { return `jge {b_str}` }
                0b0101  { return `jle {b_str}` }
                0b1101  { return `jg {b_str}` }

        }

        OP_RAM {

            const LOAD   = 0
            const STORE  = 1
            const PLOAD  = 2
            const PSTORE = 3

            switch opcode
                LOAD   { return `load {dest_str}, [{b_str}]` }
                STORE  { return `store [{b_str}], {a_str}` }
                PLOAD  { return `pload {dest_str}, [{b_str}]` }
                PSTORE { return `pstore [{b_str}], {a_str}` }

        }


}
def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    inputs[0] = get_random_instruction()
    inputs[1] = random(0xfff) << 2
    inputs[2] = random(2)

}

def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {

    if outputs[0] == Z_STATE {

        set_error(`First output should never be Z.`)
        return fail

    }


    let was_predicting  = scratch_space[WAS_PREDICTING_1] == 1
    let prediction_addr = scratch_space[PREDICTION_ADDR_1]
    let is_locked       = was_predicting || (scratch_space[WAS_PREDICTING_0] == 1)

    _reg_alloc_use is_locked // Force this to be loaded here before we write to scratch_space. Really need to fix this in the compiler

    if was_predicting {

        if outputs[0] == Z_STATE {

            set_error(`First output should never be Z.`)
            return fail

        }

        let old_prediction = scratch_space[PREDICTION_CACHE + prediction_addr]
        let new_prediction = inputs[2]

        let misprediction = (old_prediction != new_prediction)

        if outputs[1] != <Int> misprediction {

            if misprediction {

                set_error(`The second output should be [ON] as we had a misprediction.`)

            } else {

                set_error(`The second output should be [OFF] as we did not have a misprediction.`)

            }

            return fail

        }
        

        scratch_space[PREDICTION_CACHE + prediction_addr] = new_prediction

    } elif outputs[1] > 0 {

        set_error(`The misprediction output should be [OFF] since this isn't a jump result.`)
        return fail

    }

    if outputs[2] != scratch_space[PREDICTION_OUTPUT_CACHE_1] {

        set_error(`Expected jump address to be {scratch_space[PREDICTION_OUTPUT_CACHE_1]}.`)
        return fail

    }

    scratch_space[WAS_PREDICTING_1] = scratch_space[WAS_PREDICTING_0]
    scratch_space[WAS_PREDICTING_0] = 0

    scratch_space[PREDICTION_ADDR_1] = scratch_space[PREDICTION_ADDR_0]
    scratch_space[PREDICTION_ADDR_0] = 0

    scratch_space[PREDICTION_OUTPUT_CACHE_1] = scratch_space[PREDICTION_OUTPUT_CACHE_0]

    let jump_set = outputs[0] & 1 == 1

    let instruction     =  inputs[0]
    let mode            = (instruction >> 30)
    let opcode          = (instruction >> 24) & 0b1111
    let dest            = (instruction >> 20) & 0b1111
    let a               = (instruction >> 16) & 0b1111
    let b               = (instruction >> 8) & 0b1111
    let immediate       = (instruction >> 28) & 1 != 0
    let immediate_value =  instruction & 0xffff


    ui_set_text("description", instruction_to_str(instruction))

    let counter = inputs[1]
    scratch_space[PREDICTION_OUTPUT_CACHE_0] = jump_set ? counter + 4 : immediate_value

    if is_locked && jump_set {

        set_error(`First output should be OFF, as we a jump just happened and we are still waiting for it to retire.`)
        return fail

    }

    var i = 0
    while i < 8 {

        /*
        if get_level_memory(i) != scratch_space[PREDICTION_CACHE + i] {

            set_error(`Memory {i} should be {scratch_space[PREDICTION_CACHE + i]}.`)
            return fail

        }
        */

        i += 1
    }

    if mode != OP_JMP || !immediate {

        if jump_set {
            
            if mode != OP_JMP {
                
                set_error(`First output should be OFF, as the instruction is not a jump.`)

            } else {

                set_error(`First output should be OFF, as the jump offset is not an immediate value.`)

            }

            return fail

        }

    } else {

    
        if !is_locked {

            let address = (immediate_value >> 2) & 0b111

            if outputs[0] != scratch_space[PREDICTION_CACHE + address] {

                set_error(`Prediction should have been {scratch_space[PREDICTION_CACHE + address]}.`)
                return fail

            }

            scratch_space[PREDICTION_ADDR_0] = address
            scratch_space[WAS_PREDICTING_0]  = 1

        }

    }


    if tick >= 0x2fff {

        return win

    }

}

