const OP_IO  = 0
const OP_ALU = 1
const OP_JMP = 2
const OP_RAM = 3

def instruction_to_str(instruction: Int) String {

    let mode            = (instruction >> 30)
    let opcode          = (instruction >> 24) & 0b1111
    let dest            = (instruction >> 20) & 0b1111
    let a               = (instruction >> 16) & 0b1111
    let b               = (instruction >> 8) & 0b1111
    let immediate       = (instruction >> 28) & 1 != 0
    let immediate_value =  instruction & 0xffff

    var dest_str = ""

    switch dest
        0 { dest_str = "zr" }
        14 { dest_str = "sp" }
        15 { dest_str = "flags" }
        default { dest_str = "r" + str(dest) }


    var a_str = ""

    switch a
        0 { a_str = "zr" }
        14 { a_str = "sp" }
        15 { a_str = "flags" }
        default { a_str = "r" + str(a) }

    var b_str = ""

    if immediate {

        b_str = str(immediate_value)

    } else {

        switch b
            0 { b_str = "zr" }
            14 { b_str = "sp" }
            15 { b_str = "flags" }
            default { b_str = "r" + str(b) }

    }

    switch mode

        OP_IO {

            const NOP      = 0
            const IN       = 1
            const OUT      = 2
            const CONSOLE  = 3
            const TIME_0   = 4
            const TIME_1   = 5
            const TIME_2   = 6
            const TIME_3   = 7
            const COUNTER  = 8
            const KEYBOARD = 9

            switch opcode
                NOP      { return `nop (does nothing)` }
                IN       { return `in {dest_str}` }
                OUT      { return `out {b_str}` }
                CONSOLE  { return `console {b_str}` }
                TIME_0   { return `time_0 {dest_str}` }
                TIME_1   { return `time_1 {dest_str}` }
                TIME_2   { return `time_2 {dest_str}` }
                TIME_3   { return `time_3 {dest_str}` }
                COUNTER  { return `counter {dest_str}` }
                KEYBOARD { return `keyboard {dest_str}` }

        }

        OP_ALU {

            var opcode_str = ""

            switch opcode
                0 { opcode_str = "nand" }
                1 { opcode_str = "or"  }
                2 { opcode_str = "and" }
                3 { opcode_str = "nor" }
                4 { opcode_str = "add" }
                5 { opcode_str = "sub" }
                6 { opcode_str = "xor" }
                7 { opcode_str = "lsl" }
                8 { opcode_str = "lsr" }
                9 { return `cmp {a_str}, {b_str}` }

            return `{opcode_str} {dest_str}, {a_str}, {b_str}`

        }

        OP_JMP {

            switch opcode
                0b1000  { return `jmp {b_str}` }
                0b0001  { return `je {b_str}` }
                0b1001  { return `jne {b_str}` }

                0b0010  { return `jb {b_str}` }
                0b1010  { return `jae {b_str}` }
                0b0011  { return `jbe {b_str}` }
                0b1011  { return `ja {b_str}` }

                0b0100  { return `jl {b_str}` }
                0b1100  { return `jge {b_str}` }
                0b0101  { return `jle {b_str}` }
                0b1101  { return `jg {b_str}` }

        }

        OP_RAM {

            const LOAD   = 0
            const STORE  = 1
            const PLOAD  = 2
            const PSTORE = 3

            switch opcode
                LOAD   { return `load {dest_str}, [{b_str}]` }
                STORE  { return `store [{b_str}], {a_str}` }
                PLOAD  { return `pload {dest_str}, [{b_str}]` }
                PSTORE { return `pstore [{b_str}], {a_str}` }

        }


}

def get_random_instruction() Int {

    var mode = random(4)

    let d_vec = random(8) << 20
    let a_vec = random(8) << 16
    let b_vec = random(2) == 0 ? 1 << 28 | random(0xffff) : random(8) << 8

    switch mode


        OP_IO {

            switch random(3) 
                0 { return 0 }
                1 { return OP_IO << 30 | d_vec }
                2 { return OP_IO << 30 | 1 << 24 | a_vec }

        }

        OP_ALU {

            let opcode = random(10)

            if opcode == 9 {

                return OP_ALU << 30 | opcode << 24 | 6 << 20 | a_vec | b_vec

            }

            return OP_ALU << 30 | opcode << 24 | d_vec | a_vec | b_vec

        }
        
        OP_RAM {

            let opcode = random(2)

            switch opcode
                0 {

                    return OP_RAM << 30 | opcode << 24 | d_vec | b_vec

                }
                1 {

                    return OP_RAM << 30 | opcode << 24 | 1 << 24 | b_vec | a_vec

                }

        }

        OP_JMP {

            var opcode = random(14)
            while opcode != 0b0001 && opcode != 0b1001 && opcode != 0b0010 && opcode != 0b1010 && opcode != 0b0011 && opcode != 0b1011 && opcode != 0b0100 && opcode != 0b1100 && opcode != 0b0101 && opcode != 0b1101 {
                opcode = random(14)
            }

            return OP_JMP << 30 | opcode << 24 | 0b111 << 20 | ((b_vec >> 2) << 2) 

        }

}


def get_reg_name(register: Int) String {

    switch register
        0 { return `zr` }
        1 { return `r1` }
        2 { return `r2` }
        3 { return `r3` }
        4 { return `r4` }
        5 { return `r5` }
        6 { return `r6` }
        7 { return `r7` }
        8 { return `r8` }
        9 { return `r9` }
        10 { return `r10` }
        11 { return `r11` }
        12 { return `r12` }
        13 { return `r13` }
        14 { return `sp` }
        15 { return `flags` }
    
}

def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    let register = random(16)

    set_custom_input_text(get_reg_name(register))

    inputs[0] = get_random_instruction()
    inputs[1] = register

}

def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {


    let instruction     = inputs[0]
    ui_set_text("description", instruction_to_str(instruction))

    let mode            = (instruction >> 30)
    let opcode          = (instruction >> 24) & 0b1111
    let immediate       = ((instruction >> 28) & 1) == 1
    var dest_value      = ((instruction >> 20) & 0b1111)
    var a_reg           = (instruction >> 16) & 0b1111
    var b_reg           = ((instruction >>  8) & 0b111)

    let register        = inputs[1]

    if register == 0 && outputs[0] != 0 {

        set_error(`Always output 0 when we test against register 0.`)
        return fail

    }

    let a = a_reg != 0 && a_reg == register
    let b = b_reg != 0 && !immediate && b_reg == register

    let result = outputs[0] == 1

    if result {

        if !a && !b {

            if b_reg == register && immediate {

                set_error(`Arg B is not {get_reg_name(register)}, it is an immediate value.`)
                return fail

            }

            set_error(`Register {register} is not used.`)
            return fail

        }


    } else {

        if a {

            set_error(`The first argument is {get_reg_name(register)}.`)
            return fail

        }

        if b {

            set_error(`The second argument is {get_reg_name(register)}.`)
            return fail

        }

    }

    if tick >= 0xffff {

        if get_delay_score() >= 60 {

            set_error(`Your solution is correct, but delay should be less than 60.`)
            return fail

        }

        return win

    }

}
