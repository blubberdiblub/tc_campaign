
const MEMORY = 0

def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    let store_register = random(16)
    let value = random(0xffff + 1)


    if store_register != 0 {
    
        scratch_space[MEMORY + store_register] = value
    
    }

    inputs[0] = random(16)
    inputs[1] = random(16)
    inputs[2] = store_register
    inputs[3] = value

}

def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {


    var i = 1

    while i < 14 {

        let memory_value = get_level_memory(`r{i}`)
        if memory_value != scratch_space[MEMORY + i] {

            if memory_value == Z_STATE {

                set_error(`Link the r{i} probe to a register`)
                return fail

            }

            set_error(`r{i} is supposed to be {scratch_space[MEMORY + i]}, not {<U64> memory_value}`)
            return fail

        }

        i += 1

    }

    {

        let memory_value = get_level_memory(`sp`)
        if memory_value != scratch_space[MEMORY + 14] {

            if memory_value == Z_STATE {

                set_error(`Link the 'sp' probe to a register`)
                return fail

            }

            set_error(`'sp' is supposed to be {scratch_space[MEMORY + 14]}, not {<U64> memory_value}`)
            return fail

        }

    }

    {

        let memory_value = get_level_memory(`flags`)
        if memory_value != scratch_space[MEMORY + 15] {

            if memory_value == Z_STATE {

                set_error(`Link the 'flags' probe to a register`)
                return fail

            }

            set_error(`'flags' is supposed to be {scratch_space[MEMORY + 15]}, not {<U64> memory_value}`)
            return fail

        }

    }



    def cast_z_to_zero(input: Int) Int {

        return input & 0xffff

    }


    if cast_z_to_zero(outputs[0]) != scratch_space[MEMORY + inputs[0]] {

        set_error(`The first output should be {scratch_space[MEMORY + inputs[0]]}, not {outputs[0]}.`)
        return fail

    }

    if cast_z_to_zero(outputs[1]) != scratch_space[MEMORY + inputs[1]] {

        set_error(`The second output should be {scratch_space[MEMORY + inputs[1]]}, not {outputs[1]}.`)
        return fail

    }


    if tick == 0xfff {

        return win

    }

}