kind = sequential
title = "Superscalar register"
size = [-48, -48, 49, 33]
background = 6
save_solution_as_custom = "Symphony/Allegro/superscalar/inner_reg"
//copy_solution_to_level = ["symphony_register_4"]
input_labels = [["Load A 0"], ["Load A 1"], ["Store A"], ["Store A value"], ["Load B 0"], ["Load B 1"], ["Store B"], ["Store B value"], ["Register index"]]
output_labels = ["Load A 0", "Load A 1", "Load B 0", "Load B 1"]
dialogue = [
    (alien_center, `The register file in our superscalar architectures has to be able to load 4 values and store 2 at the same time.

To simplify the wiring of the register file, we in this level build an inner register and move some of the logic inside. In this inner register, the register index is passed in as a value together with the indexes of the register that need to be loaded / stored from. So if our register index is 4 and a load index is also 4, we output the value on the corresponding load pin.`),
]