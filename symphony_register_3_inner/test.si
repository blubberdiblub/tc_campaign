
const MEMORY = 0

def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    let this_index = 1 + random(15)
    let store_1 = random(16)
    let store_2 = random(16)
    let value_1 = random(0xffff + 1)
    let value_2 = random(0xffff + 1)

    if store_1 == this_index {
        scratch_space[MEMORY] = value_1
    }
    if store_2 == this_index {
        scratch_space[MEMORY] = value_2
    }

    inputs[0] = random(16)
    inputs[1] = random(16)
    inputs[2] = store_1
    inputs[3] = value_1
    inputs[4] = random(16)
    inputs[5] = random(16)
    inputs[6] = store_2
    inputs[7] = value_2
    inputs[8] = this_index

}

def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {

    let this_index = inputs[8]

    if get_level_memory("count") != scratch_space[MEMORY] {

        let memory_value = get_level_memory("count")

        if memory_value == Z_STATE {

            set_error(`Link the memory probe to a component`)
            return fail

        }

        set_error(`Memory is supposed to be {scratch_space[MEMORY]}, not {get_probe_value()}`)
        return fail

    }
    
    if inputs[0] == this_index {

        if outputs[0] != scratch_space[MEMORY] {

            set_error(`The first output should be {scratch_space[MEMORY]}`)
            return fail

        }

    } elif outputs[0] != Z_STATE {

        set_error(`The first output should be Z`)
        return fail

    }

    if inputs[1] == this_index {

        if outputs[1] != scratch_space[MEMORY] {

            set_error(`The second output should be {scratch_space[MEMORY]}`)
            return fail

        }

    } elif outputs[1] != Z_STATE {

        set_error(`The second output should be Z`)
        return fail

    }

    if inputs[4] == this_index {

        if outputs[2] != scratch_space[MEMORY] {

            set_error(`The third output should be {scratch_space[MEMORY]}`)
            return fail

        }

    } elif outputs[2] != Z_STATE {

        set_error(`The third output should be Z`)
        return fail

    }

    if inputs[5] == this_index {

        if outputs[3] != scratch_space[MEMORY] {

            set_error(`The fourth output should be {scratch_space[MEMORY]}`)
            return fail

        }

    } elif outputs[3] != Z_STATE {

        set_error(`The fourth output should be Z`)
        return fail

    }

    if tick == 0xffff {

        if get_delay_score() >= 60 {

            set_error(`Your solution is correct, but delay should be less than 60.`)
            return fail

        }

        return win

    }

}